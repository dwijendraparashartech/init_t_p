programs_imp.txt ::

...................


25. Array Programs :: Very Good Blog :: 

https://github.com/kumar91gopi/Algorithms-and-Data-Structures-in-Ruby

.................................................................................


Q1. Swapping :: Swapping of Two Numbers :: 

                 .....................................................

1. 

Swapping of two numbers :: 
..............................

Method First ::  Using Temporary variable)


def swap(a,b)
    temp = a
    a = b
    b = temp
    return a,b
end
print swap(3,1)

..............................

Method Second :: (Ruby magic)

def swap(a,b)
    a,b=b,a
    return a,b
end
print swap(3,1)

..............................

Method Third :: (Using sum and difference, no temporary variable required)

def swap(a,b)
    a = a+b
    b = a-b
    a = a-b
    return a,b
end
print swap(3,1)


..............................


 Method Fourth :: :: Method 4 (Using bitwise XOR ,no temporary variable required) 


def swap(a,b)
    a = a^b
    b = a^b
    a = a^b
    return a,b
end

..............................

.................................................................................



.................................................................................


Q2. Reversing :: Reversing of Array  :: 

                 .....................................................

....................................


First Method   ::  # Iterative

# Iterative
def reverse_array(a)
    right=a.length-1
    left=0
    while(left<right)
     #swap the elements
        temp=a[left]        #Swapping can be like done like this a[left],a[right]=a[right],a[left]
        a[left]=a[right]
        a[right]=temp
        
        left+=1
        right-=1
    end
    print a
end

reverse_array([1,2,3,4,5]) # => [5,4,3,2,1]

...................................

Second  Method ::  # Recursive


....................................
#driver program

def driver_program(a)
    right=a.length-1
    left=0 
    reverse_array(a,left,right)
    print a
end
def reverse_array(a,left,right)
    
    return  if left>=right 
     #swap the elements
        temp=a[left]        
        a[left]=a[right]
        a[right]=temp
        reverse_array(a,left+1,right-1)
end

driver_program([1,2,3,4,5]) # => [5,4,3,2,1]

......................................

Q2. #Given an array of random numbers, Push all the zero’s of a given array to the end of the array :: 

                 .....................................................

....................................


#Time Complexity: O(n),Auxiliary Space: O(1)

##Algorithm:
    #Traverse the given array from left to right andmaintain count of non-zero elements in array.
    # For every non-zero element arr[i], put the element at ‘arr[count]’ and increment ‘count’. 
    # After complete traversal, all non-zero elements have already been shifted to front end and ‘count’ is set as index of first 0. 
    # Now run a loop which makes all elements zero from ‘count’ till end of the array zero.

def move_zeros(a)
    len=a.length
    count=0
    for i in 0...len
        if a[i]!=0
            a[count]=a[i]
            count+=1
        end
    end
  # Loop from count to len-1 and fill it with zeros 
    while count<len
        a[count]=0
        count+=1
    end
    return a
end

print move_zeros([1,2,0,3,0,4,0,5,0,0,6]) # => [1, 2, 3, 4, 5, 6, 0, 0, 0, 0, 0]


.................

Q4. Sort a Given Array by Frequency of Element :: 


                 .....................................................

....................................


def sort_by_frequency(a)
    len=a.length
    freq=Hash.new() #Hash to store element,count and starting index
    for i in 0...len
    # Storing count and index in hash with element as the key
     unless freq[a[i]]
         freq[a[i]]={}
         freq[a[i]][:count]=1 
         freq[a[i]][:index]=i
     else
         freq[a[i]][:count]+=1
     end
    end
    
    freq=freq.sort_by{|k,v| [-v[:count],v[:index]]} # Sort the hash by decreasing count value and if count is same then by index(starting index)
    p=0                         # Index to iterate over array
    # Iterate on hash
    freq.each do |k,v|
        for i in 0...v[:count]
          a[p]=k
          p+=1
        end  
    end
  return a
end
        

print sort_by_frequency([1,3,3,3,4,4,4,2,2,2,5]),"\n" # => [3, 3, 3, 4, 4, 4, 2, 2, 2, 1, 5]
print sort_by_frequency([1,3,3,3,4,4,4,2,2,2,5,5,6,7,7,7,8,8]) # => [3, 3, 3, 4, 4, 4, 2, 2, 2, 7, 7, 7, 5, 5, 8, 8, 1, 6]



..................................................


Q.5. :: 

# Find majority element(if exists) in a given sorted array.

# A majority element in an array A[] of size n is an element that appears more than n/2 times 
#Time-complexity: O(logn), Auxiliary-space:O(1)
#Algorithm: Binary-search

def majority_element(a)
  	len=a.length
   	lo=0
  	hi=len-1
	  mid= lo+(hi-lo)/2
   	candidate=a[mid]
	  if len%2==0 && a[lo]==a[mid+1]
		    return candidate
	  elsif len%2 !=0 && a[lo]==candidate
		    return candidate
	  else
		    while hi-lo>1
	          mid=lo+(hi-lo)/2
            if a[mid]>=candidate
	            hi=mid
	          else
	            lo=mid
            end
		    end
  
	      if a[hi]==candidate
	       	  left_index=hi
	     	    right_index=left_index+(len/2)
        
	  		    if a[right_index]==candidate
	            return candidate
	   		    else
	       		  return -1
	   		    end
	      end
  	    
	  end
end
puts majority_element([1,1,3,3,3,3]) # output 3

..................................................

