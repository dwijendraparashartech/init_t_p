Example.txt ::

Imp links ::
https://www.akshaykhot.com/metaprogramming-ruby/
..................


1. Example of metaprogramming
2. ExamplE of monkey patching 
3. ExamplE of delegate method 
4. ExamplE of single table inheritance
5. ExamplE of multi table inheritance
6. ExamplE of duck typing
7. ExamplE of single ton method 
8. ExamplE of private/protected/public methods
9. ExamplE of method-overriding & method-overloading 
10.ExamplE of PORO-Plain Old Ruby Objects 
11.ExamplE of Scopes 
12.ExamplE of Procs 
13.ExamplE of Lambdas 
14.ExamplE of Garbage Collector 
15.ExamplE of Join and Include 
16.ExamplE of Design Pattern
17.ExamplE of Decorator Design Pattern
18.ExamplE of has_and_belongs_to_many and has_many_through association 
19.ExamplE of types of Joins in Rails 
20.Example of Helper Methods in Rails 
21.


............  ............  ............  ............ ............  ............  ............  ............  ............  ............ ............  ............ 


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................


1. Meta programming ::

First Example of Meta Programming ::
.......................................

# before meataprogramming 
class MyClass
  def red
    'red'
  end
  def blue
    'blue'
  end
  def green
    'green'
  end
  def yellow
    'yellow'
  end
end

# after meataprogramming 
class MyClass
  COLORS = ['red', 'blue', 'green', 'yellow']
  COLORS.each do |color|
    define_method color do
      color
    end
  end
end

Second Example of Meta Programming ::
.......................................


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................


............  ............  ............  ............ ............  ............  ............  ............  ............  ............ ............  ............ 

2. Monkey patching ::

# Before applying patching
hash = { "Geeks"=>"G","for"=>"F","geeks"=>"g" }
puts "Before blocking reverse: " hash.delete "for"
puts "Deleted 'for' key"
puts hash

# Apply patching
class Hash
  def delete(key)
    "Delete blocked!!"
  end
end

# After applying patching
hash = { "Geeks"=>"G","for"=>"F","geeks"=>"g" }      
puts "Before blocking reverse: "
puts "Deleting 'for' key but " + hash.delete("for")
puts hash

Output:
Before blocking reverse: 
Deleted 'for' key
{"Geeks"=>"G", "geeks"=>"g"}
Before blocking reverse: 
Deleting 'for' key but Delete blocked!!
{"Geeks"=>"G", "for"=>"F", "geeks"=>"g"}



...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................

............  ............  ............  ............ ............  ............  ............  ............  ............  ............ ............  ............ 

3. Delegation :: Delegate Method ::

Link :: https://medium.com/@pk60905/using-delegate-in-rails-527332da7f96
Example :: 

For example I have a QueueItem and aVideo model.

QueueItem < ActiveRecord::Base
  belongs_to :video
end
Video < ActiveRecord::Base
  has_many :queue_items
  belongs_to :category
end

...........

If I want to get the category object of the video in first queue_item, I may write

queue_item = QueueItem.first
queue_item.video.category.name
#=> "Action"

............

It is kind of cumbersome. Instead of getting the object via model association, we can use delegate to help us.

class QueueItem < ActiveRecord::Base
  belongs_to :video
 
  delegate :category, to: :video
end
Then we can get the category by

queue_item = QueueItem.first
queue_item.category.name
#=> "Action"
Or even you can set a category_name method in the QueueItem model.



class QueueItem < ActiveRecord::Base
  belongs_to :video
 
  delegate :category, to: :video
  def category_name
    category.name
  end
end
queue_item = QueueItem.first
queue_item.category_name
#=> "Action"
You can set one or more method names (specified as symbols or strings) if you want. And the name of the target object via the :to option(also a symbol or string).

There are some options you can use in delegation

:to — Specifies the target object
:prefix — Prefixes the new method with the target name or a custom prefix
:allow_nil — if set to true, prevents a NoMethodError to be raised
You can use the prefix option to make the method more readable.



class QueueItem < ActiveRecord::Base
  belongs_to :video
  delegate :category, to: :video
  delegate :title, to: :video, prefix: :video
end

queue_item = QueueItem.first
queue_item.video_title == queue_item.video.title
# => true


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................................

............  ............  ............  ............ ............  ............  ............  ............  ............  ............ ............  ............ 

4. Single table inheritance Example :: 

rails generate model Expert name gender salary type
rails db:create db:migrate

# app/models/beard_dresser.rb
class BeardDresser < Expert
end

# app/models/hair_dresser.rb
class HairDresser < Expert
end

HairDresser.create(name: "John", gender: "male", salary: "10000")
BeardDresser.create(name: "Mike", gender: "male", salary: "9000")

HairDresser.count
=> 1

BeardDresser.count
=> 1

Expert.count
=> 2


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
............  ............  ............  ............ ............  ............  ............  ............  ............  ............ ............  ............ 
 
5. Example of observer 

A. simple email method to send email but our model job is not to send the emails so it breaks the single responsibility principle 
class User < Activerecord::Base
  after_save :send_email_notification

  private
  def send_email_notification
    if status_changed?
      UserNotificationMailer.account_open_email(self).deliver if status=='created'
      UserNotificationMailer.account_activated_email(self).deliver if status == 'active'
      UserNotificationMailer.account_deactivation_email(self).deliver if status =='deactive'
    end
  end
end


B. 
class UserObserver < ActiveRecord::Observer
  def after_save(record)
    if record.status_changed?
      UserNotificationMailer.account_open_email(record).deliver if record.status=='created'
      UserNotificationMailer.account_activated_email(record).deliver if record.status == 'active'
      UserNotificationMailer.account_deactivation_email(record).deliver if record.status =='deactive'
    end
  end
end


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................

............  ............  ............  ............ ............  ............  ............  ............  ............  ............ ............  ............ 

C. 
Use Single observer for multiple models ::
.............

............  ............  ............  ............ ............  ............  ............ ............  ............  ............  ............ .............

6. example of Callback ::

A. 
class Subscription < ActiveRecord::Base
   before_create :record_signup
   private
   def record_signup
      self.signed_up_on = Date.today
   end
end

B.


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................

.............

7. Example of Duck typing ::

Duck typing is a style of programming where it allows an object to be passed in to a method that expects a certain type even if it doesn’t inherit from that type. 
All it has to do is support the methods and properties of the expected type in use by the method. In duck typing, one is concerned with just those aspects of an object that are used, rather than the type of the object itself.
If the object does not have the methods that are called then it will signal a run-time error to the user. If the object have the methods, then they are executed no matter the type of the object.


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................



...................................................
...................................................
...................................................
...................................................
...............

8. Example of Private , Protected and Public Method ::

1.Example of Public Method :: 

class Person 
  def speak
    puts "Hey, Tj!"
  end 
end 
you = Person.new 
you.speak # "Hey, Tj!" 

...............

2. Example of Private Method :: 

class Person
  def speak
    puts "Hey, Tj!"
  end
  def whisper_louder
    whisper
  end 
# private methods are for internal usage within the defining class
  private 
  def whisper
    puts "His name's not really 'Tj'." 
  end 
end
you = Person.new 
you.speak # "Hey, Tj!"
a_hater = Person.new
a_hater.speak # "Hey, Tj!"
a_hater.whisper # NoMethodError
a_hater.whisper_louder # "His name's not really 'Tj'."

...............

3. Example of Protected Method :: 

class Person
  def speak
    puts "Hey, Tj!"
  end
  def whisper_louder
    whisper
  end
 private
  def whisper
    puts "His name's not really 'Tj'."
  end
 protected
 def greet
   puts "Hey, wassup!"
 end
end
class Me < Person
  def be_nice
    greet 
  end
end
tj = Me.new
tj.be_nice # "Hey, wassup!"
tj.greet # NoMethodError


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................

...............
...................................................
...................................................
...................................................
...................................................

...............

...........  ............  ............  ............ ............  ............  ............ ............  ............  ............  ............ ............

9. Example of SingeTon Method ::

Ex1 :: ........................

...............................

# Ruby program to demonstrate the use 
# of singleton methods
o1 = String.new 

# object1(o1)
o1 = "GeeksforGeeks"
o2 = String.new 
  
# object2(o2)
o2 = "GoodExample"
  
# Singleton method of object o2 
def o2.size     
 return "Size does not matter"
end
   
puts "Singleton Method Example:"
puts "Invoke from the object(o1):"
  
# Returns the size of string "Example1"
puts o1.size 
puts "Invoke from the object(o2):"
  
# Returns the o2.size method’s
# return statement
puts o2.size

Output:

Singleton Method Example:
Invoke from the object(o1):
13
Invoke from the object(o2):
Size does not matter

..............

Ex2 ::

# Ruby program to demonstrate the use 
# of singleton methods
class Vehicle
  def wheels
    puts "There are many wheels"
  end
end
  
# Object train
train = Vehicle.new 
  
# Object car
car = Vehicle.new   
  
# Singleton method for car object
def car.wheels   
  puts "There are four wheels"
end
  
puts "Singleton Method Example"
puts "Invoke from train object:"
train.wheels         
puts "Invoke from car object:"
car.wheels

Output:
Singleton Method Example
Invoke from train object:
There are many wheels
Invoke from car object:
There are four wheels

............................


Explanation:
It can be observed that the method wheels have been redefined for the car object of Vehicle class. This wheels method is nothing but a singleton method that shows different behavior for the car.


........................................

Ex3 :: 

ruby> class SingletonTest
    |   def size
    |     print "25\n"
    |   end
    | end
   nil
ruby> test1 = SingletonTest.new
   #<SingletonTest:0xbc468>
ruby> test2 = SingletonTest.new
   #<SingletonTest:0xbae20>
ruby> def test2.size
    |   print "10\n"
    | end
   nil
ruby> test1.size
25
   nil
ruby> test2.size
10
   nil


In this example, test1 and test2 belong to same class, but test2 has been given a redefined size method and so they behave differently. A method given only to a single object is called a singleton method.

........................................




...........  ............  ............  ............ ............  ............  ............ ............  ............  ............  ............ .............
...........  ............  ............  ............ ............  ............  ............ ............  ............  ............  ............ .............

Link ::  https://www.toptal.com/ruby/ruby-metaprogramming-cooler-than-it-sounds
https://thecodeboss.dev/2015/08/metaprogramming-in-ruby-part-1/
Very Very Very Very Very Very  Important Blog ::::::::::::::::: 

10. Example of class_eval ::

class_eval can be used to create an instance method

Developer.class_eval do
  p "class_eval - self is: " + self.to_s
  def frontend
    p "inside a method self is: " + self.to_s
  end
end
# "class_eval - self is: Developer"

p developer = Developer.new
# #<Developer:0x2c5d640>

developer.frontend
# "inside a method self is: #<Developer:0x2c5d640>"

.....................................

...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................


11. Example of instance_eval ::

There’s one more way to create a class method, and that is by using instance_eval:

class Developer
end

Developer.instance_eval do
  p "instance_eval - self is: " + self.to_s
  def backend
    p "inside a method self is: " + self.to_s
  end
end
# "instance_eval - self is: Developer"

Developer.backend
# "inside a method self is: Developer"

.....................................


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................


12. Example of Method Overloading ??

Link ::  https://www.codingninjas.com/codestudio/library/overloading-methods-in-ruby



...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................

.....................................


13. Example of Method Overriding ??

Example :::::::::::::  
Link ::  https://www.geeksforgeeks.org/method-overloading-in-ruby/

class Test
    def self.sum(a,b)
        puts(a+b)
    end
    def self.sum(a,b,c)
        puts(a+b+c)
    end
      
end
Test.sum(1,2)

# output :  main.rb:13:in `sum': wrong number of arguments (2 for 3) (ArgumentError)                                                      
        from main.rb:18:in 


.......................

class Test
    def self.sum(a,b)
        puts(a+b)
    end
    def self.sum(a,b,c)
        puts(a+b+c)
    end
      
end
Test.sum(1,2,7)

10
The second method overwrites the previous method and hence it works absolutely fine when we call the method with three arguments.

Explanation :: 

In Ruby, when a second method is defined with the same name it completely overrides the previously existing method. The previous method is no longer accessible and hence throws error when we try to access it.
.....................................

...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................


14. Example of Method Overloading ::  

Ex 1 , 2 ,3  ,4 ,5 Are Method Overloading :: 
......................
Ex: 1 

class MethodOverloadingExample
  def display_message(message)
    puts message
  end 

  def display_message(message,user)
    puts "Hello #{user},#{message}"
  end 
end 

obj1 = MethodOverloadingExample.new
obj1.display_message('Welcome to the Ruby World')
$ ruby method_overloading_example.rb
#Output :: Wrong Number of Arguments (given1,expected2)-Arguments Error

......................
Ex: 2 

class MethodOverloadingExample
  def display_message(message)
    puts message
  end 

  def display_message(message,user)
    puts "Hello #{user},#{message}"
  end 

  def display_message
    puts "Welcome to the Ruby World"
  end 
end 

obj1 = MethodOverloadingExample.new
obj1.display_message('Welcome to the Ruby World')
$ ruby method_overloading_example.rb
#Output :: Wrong Number of Arguments (given1,expected0)-Arguments Error

......................
Ex: 3

class MethodOverloadingExample
  def display_message(message)
    puts message
  end 

  def display_message(message,user)
    puts "Hello #{user},#{message}"
  end 

  def display_message
    puts "Welcome to the Ruby World"
  end 
end 

obj1 = MethodOverloadingExample.new
obj1.display_message('Welcome to the Ruby World','Chetan Singh')
$ ruby method_overloading_example.rb
#Output :: Wrong Number of Arguments (given1,expected0)-Arguments Error


......................
Ex: 4

class MethodOverloadingExample
  def display_message(message)
    puts message
  end 

  def display_message(message,user)
    puts "Hello #{user},#{message}"
  end 
end 

obj1 = MethodOverloadingExample.new
obj1.display_message('Welcome to the Ruby World','Chetan Singh')
$ ruby method_overloading_example.rb
#Output :: 'Welcome to the Ruby World','Chetan Singh'


......................

Ex: 5 :: Can support the variable no of arguments by * ,we take these variable no of arguments in the array list but this will be 

class MethodOverloadingExample
  def display_message(*message)
    puts message
  end 

  def display_message(message,user)
    puts "Hello #{user},#{message}"
  end 

  def display_message
    puts "Welcome to the Ruby World"
  end 
end 

obj1 = MethodOverloadingExample.new
obj1.display_message('Welcome to the Ruby World','Chetan Singh')
$ ruby method_overloading_example.rb
#Output :: 'Welcome to the Ruby World','Chetan Singh'

......................  ......................  ......................  ......................


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................

15. Example of Method Overriding :: 


Example of Method Overriding :: 


The below example is for the method overriding 
..........................

Ex.

method_overriding_example.rb 

....

class MethodOverridingExample

def display_message 
  message = "Welcome to the Ruby Progamming World"
  puts message
end 

def display_message
  user = 'Chetan Singh'
  message = 'Welcome to the Ruby World'
  puts "Hello #{user} #{message}"
end

def display_message
  puts "Welcome to the Ruby World"
end 

end 

....
........................

Execute :: 

ruby method_overriding_example.rb 
obj1 = MethodOverridingExample.new
obj1.display_message

Output :: Last method will be used because ruby is the interpretd language so it execute the code line by line .



...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................


Ex. 16 :: Example of Garbage Collection ::




...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................




14.ExamplE of Garbage Collector 



...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................

15.ExamplE of Join and Include 



...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................



16.ExamplE of Design Pattern


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................


17.ExamplE of Decorator Design Pattern


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
 

18.ExamplE of has_and_belongs_to_many and has_many_through association 


...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................


19.ExamplE of types of Joins in Rails 



...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................


20.Example of Helper Methods in Rails ::




...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................
...................................................  ...................................


