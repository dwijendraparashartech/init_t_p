joins_rails_guides.txt :: 


Types of Joins in Rails :: 







Active Record provides two finder methods for specifying JOIN clauses on the resulting SQL: joins and left_outer_joins. While joins should be used for INNER JOIN or custom queries, left_outer_joins is used for queries using LEFT OUTER JOIN.





////////////// //////////  /////////////////// //////////  //////////////////////

1.  SQL Query for the Joins :: 

There are multiple ways to use the joins method.

Query ::

Author.joins("INNER JOIN books ON books.author_id = authors.id AND books.out_of_print = FALSE")

Result ::

SELECT authors.* FROM authors INNER JOIN books ON books.author_id = authors.id AND books.out_of_print = FALSE

...............................................


2.  Joining a Single Association :: 

A.

Query 1  ::  Book.joins(:reviews)

Result ::  Return a Book object for all books with reviews"  with Duplicate Books.

B.

Query 2  ::  Book.joins(:reviews).distinct

Result ::  Return a Book object for all books with reviews"  with Unique Books.

...............................................


3. Joining Multiple Association :: 


Query 1 ::  Book.joins(:author, :reviews)

Result ::  Return all books with their author that have at least one review
...............................................


4. Joining Nested  Association Single Level  :: 


Query 1 ::  Book.joins(:author, :reviews)

Result ::  Return all books with their author that have at least one review
...............................................


5. Joining Nested  Associations Multiple Level  :: 


Query 1 ::  Author.joins(books: [{ reviews: { customer: :orders } }, :supplier] )

Result ::  Return all authors that have books with reviews and have been ordered by a customer, and the suppliers for those books.
...............................................

6. Specifying Conditions on the Join Tables ::

A.

Query 1 ::  Find all customers who have orders that were created yesterday

time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Customer.joins(:orders).where('orders.created_at' => time_range).distinct

...........................

A. 


Query 1 ::  Find all customers who have orders that were created yesterday : With Nested Hash

time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Customer.joins(:orders).where(orders: { created_at: time_range }).distinct


B.

Query 2 :: Using Scopes :: Find all customers who have orders that were created yesterday : 

class Order < ApplicationRecord
  belongs_to :customer

  scope :created_in_time_range, ->(time_range) {
    where(created_at: time_range)
  }
end
.........

time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Customer.joins(:orders).merge(Order.created_in_time_range(time_range)).distinct

...........................

7. Left Outer Joins ::

If you want to select a set of records whether or not they have associated records you can use the left_outer_joins method.

Customer.left_outer_joins(:reviews).distinct.select('customers.*, COUNT(reviews.*) AS reviews_count').group('customers.id')


...........................

8. Eager Loading Associations :: 

Eager loading is the mechanism for loading the associated records of the objects returned by Model.find using as few queries as possible.

N + 1 queries problem

Consider the following code, which finds 10 books and prints their authors' last_name:

books = Book.limit(10)

books.each do |book|
  puts book.author.last_name
end
Copy
This code looks fine at the first sight. But the problem lies within the total number of queries executed. The above code executes 1 (to find 10 books) + 10 (one per each book to load the author) = 11 queries in total.


...............................


9. Solution of Eager Loading Associations ::

Solution to N + 1 queries problem

Active Record lets you specify in advance all the associations that are going to be loaded.

The methods are:

includes
preload
eager_load

includes :: Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries.

preload ::  With preload, Active Record loads each specified association using one query per association.

With eager_load, Active Record loads all specified associations using a LEFT OUTER JOIN.




....................


10. Includes :: 

14.1 includes
With includes, Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries.

Revisiting the above case using the includes method, we could rewrite Book.limit(10) to eager load authors:

books = Book.includes(:author).limit(10)

books.each do |book|
  puts book.author.last_name
end
Copy
The above code will execute just 2 queries, as opposed to the 11 queries from the original case:

SELECT books.* FROM books LIMIT 10
SELECT authors.* FROM authors
  WHERE authors.book_id IN (1,2,3,4,5,6,7,8,9,10)


....................

11. Queries using Includes ::


Active Record lets you eager load any number of associations with a single Model.find call by using an array, hash, or a nested hash of array/hash with the includes method.

11.1 Array of Multiple Association 

Query 01 ::  Customer.includes(:orders, :reviews)


Result ::  This loads all the customers and the associated orders and reviews for each.

11.2  Nested Associations Hash

Customer.includes(orders: {books: [:supplier, :author]}).find(1)


.....................

12. 