examples_basic_advance_programs_rails.txt :: 



.........................................................
.........................................................
.........................................................


1.  How to add one object to another object in rails ::: 

cycle = Cycle.find(1)
[1, 2, 3, 4].each do |barcode|
   item = Items.where(:barcode => barcode)
   cycle.items << item
end
cycle.save

or do

cycle = Cycle.find(1)
[1, 2, 3, 4].each do |barcode|
   item = Items.where(:barcode => barcode)
   item.cycle = cycle
   item.save
end


.........................................................
.........................................................
.........................................................

2. What is the problem with 
    class MyController < ApplicationController
      def options
        options = {}
        available_option_keys = [:first_option, :second_option, :third_option]
        all_keys = params.keys.map(&:to_sym)
        set_option_keys = all_keys & available_option_keys
        set_option_keys.each do |key|
          options[key] = params[key]
        end
        options
      end
    end

Solution :: 
Replace :: 
this ::
all_keys = params.keys.map(&:to_sym)

by this ::
all_keys = params.slice(*available_option_keys)


my_desc :: 



desc ::
It’s dangerous to convert user supplied parameters to symbols, since Symbol objects in Ruby are not garbage collected. An attacker could send a series of requests with random keys that would be turned into symbols, quickly exhausting your server’s available memory and taking down your site.There are two ways that this could be fixed. The first would be to use slice to eliminate values from the params hash that are not valid option keys. This would look something like:
    params.slice(*available_option_keys)
An alternative, some would argue better, option would simply be to use String keys for your options. Unless you have an extremely large number of possible option keys, you won’t actually save that much memory by using Symbol keys instead.



.........................................................
.........................................................
.........................................................

Q3.What is the problem with controller code below :: 


class CommentsController < ApplicationController
  def users_comments
    posts = Post.all
    comments = posts.map(&:comments).flatten
    @user_comments = comments.select do |comment|
      comment.author.username == params[:username]
    end
  end
end

Sol ::   
Replace - 
posts = Post.all      to the below line please 
posts = Post.includes(comments: [:author]).all


my_desc:
this is n+1 bug , we have retrive the post objects first but immediately after we get the comments and after that immediately we get the author of each comment . so use includes with post and comments with Post initially so database request will decreased. and this is the fast query which will tell the active record immediately.


desc: 
This is a classic example of the notorious “n+1” bug. The first line will retrieve all of the Post objects from the database, but then the very next line will make an additional request for each Post to retrieve the corresponding Comment objects. To make matters worse, this code is then making even more database requests in order to retrieve the Author of each Comment.This can all be avoided by changing the first line in the method to: posts = Post.includes(comments: [:author]).all
This tells ActiveRecord to retrieve the corresponding Comment and Author records from the database immediately after the initial request for all Posts, thereby reducing the number of database requests to just three.Please note that the above answer is only one of a few ways that it is possible to avoid incurring an “n+1” penalty, and each alternative will have its own caveats and corner cases. The above answer was selected to be presented here since it requires the smallest change to the existing code and makes no assumptions regarding the reverse association of Comment to Post.
Incidentally, there’s another issue here (although not what we’re focused on in this question and answer); namely, erforming a query in Ruby that could instead be done in the database (and which would very likely be faster there!). A relatively complex query like this can instead be constructed in ActiveRecord pretty easily, thus turning a 3 database query operation (plus some Ruby code executing) into a single database query.


..........................................



Q4: solve the below problem :: 

Given this input:

x = [{"a" => 10},{"b" => 20},{"c" => 30}]
How can you obtain the following?

one array containing all keys
another containing all values
the sum of all the values


Sol ::  
x = [{"a" => 10},{"b" => 20},{"c" => 30}]
y = x[0].merge(x[1]).merge(x[2])
y.keys  # will return all keys
y.values # will return all values
y.values.inject(:+)   # will return the sum of all values

But a better first line would be this:

y = x.reduce(:merge)
…because it would work on an array of any size, not just the exact input given.

..........................................


Q5. Given an array [1,2,3,4,5,6,7,8,9], sum it up using a method.

Answer: Summation of an array is one of the most fundamental concepts in programming, and there are a lot of methods to achieve it, such as iterating the array and summing the numbers. In Ruby, it’s neat to know that we can call inject, because it’s so powerful yet simple.

def sum(array)
  return array.inject(:+)
end


..........................................


Q6.
How would you define a Person model so that any Person can be assigned as the parent of another Person (as demonstrated in the Rails console below)? What columns would you need to define in the migration creating the table for Person?

irb(main):001:0> john = Person.create(name: "John")
irb(main):002:0> jim = Person.create(name: "Jim", parent: john)
irb(main):003:0> bob = Person.create(name: "Bob", parent: john)
irb(main):004:0> john.children.map(&:name)
=> ["Jim", "Bob"]
And for a more advanced challenge: Update the Person model so that you can also get a list of all of a person’s grandchildren, as illustrated below. Would you need to make any changes to the corresponding table in the database?

irb(main):001:0> sally = Person.create(name: "Sally")
irb(main):002:0> sue = Person.create(name: "Sue", parent: sally)
irb(main):003:0> kate = Person.create(name: "Kate", parent: sally)
irb(main):004:0> lisa = Person.create(name: "Lisa", parent: sue)
irb(main):005:0> robin = Person.create(name: "Robin", parent: kate)
irb(main):006:0> donna = Person.create(name: "Donna", parent: kate)
irb(main):007:0> sally.grandchildren.map(&:name)
=> ["Lisa", "Robin", "Donna"]

.....

Sol ::
Normally, the target class of an ActiveRecord association is inferred from the association’s name (a perfect example of “convention over configuration”). It is possible to override this default behavior, though, and specify a different target class. Doing so, it is even possible to have relationships between two objects of the same class.

This is how it is possible to set up a parent-child relationship. The model definition would look like:

class Person < ActiveRecord::Base
  belongs_to :parent, class: Person
  has_many :children, class: Person, foreign_key: :parent_id
end
It’s necessary to specify the foreign_key option for the has_many relationship because ActiveRecord will attempt to use :person_id by default. In the migration to create the table for this model, you would need to define, at minimum, a column for the name attribute as well as an integer column for parent_id.

Self-referential relationships can be extended in all the same ways as normal two-model relationships. This even includes has_many ... :through => ... style relationships. However, because we are circumventing Rails’ conventions, we will need to specify the source of the :through in the case of adding a grandchild relationship:

class Person < ActiveRecord::Base
  belongs_to :parent, class: Person
  has_many :children, class: Person, foreign_key: :parent_id
  has_many :grandchildren, class: Person, through: :children, source: :children
end

Consequently, since this is still just using the parent_id defined in the first case, no changes to the table in the database are required.

.......................................


Q7. What is wrong with the code below? Also, state the reason.
require "benchmark"
puts Benchmark.measure do
    break if Random.rand(100) === 1 while true
end

..

Sol :: 

Answer: The operator precedence is the issue in the code. The code will return:

LocalJumpError: no block given (yield)
As do-end is weaker than attracting arguments to the function, that’s why one either needs to surround the whole call to Benchmark.measurewith parentheses, or to use curly brackets instead of do-end.

.......................................


..........................................

Q8 ::  
Create a route to be able to display pages with different information about different types of beer. The route should recognize URL paths like /beer/<beer_type> and should use the same controller action for each type of beer with the actually beer type passed into the controller action as a parameter. The valid beer types are:
IPA
brown_ale
pilsner
lager
lambic
hefeweizen
Any other type of beer specified should generate a 404 status code.
.........................................................................

One option would be to generate a simple get route that specifies the controller action to call and passes the kind of beer as a parameter:

get 'beers/:kind' => 'beers#kind'
Then, within the context of the controller action, if the kind parameter is not included in the list of valid kinds, the action can raise a ActionController::RoutingError, which will redirect to 404 in production.

Alternatively, a simpler solution is to check against the list of valid kinds in the definition of the route. This can be accomplished using the constraints option as follows:

kinds = %w|IPA brown_ale pilsner lager lambic hefweizen|
get 'beers/:kind' => 'beers#kind', constraints: {kind: Regexp.new(kinds.join('|'))}
This code calls the BeersController#kind action method with params['kind'] set to a string representing the beer type given in the URL path. The key is using the constraints option for the route to specify a regular expression to use to verify the route is correct. In this case, the lambda checks to see that the kind parameter is included in the list of valid beer types.

Or perhaps an even better solution would be to use resource routing. This has the added benefit of providing URL generation helpers, but at the cost of requiring that the parameter name for the beer be passed as :id. This would look something like:

kinds = %w|IPA brown_ale pilsner lager lambic hefweizen|
resource :beer, only: [:show], constraints: {id: Regexp.new(kinds.join('|'))}

.......................................................................................

Q9.Suppose we have a Student with id=”4”. If we delete the Student with id=”4”, what will be the result of the following queries:

Student.find(4)  ------
will raise an error: ActiveRecord::RecordNotFound: Couldn't find Student with id=4



Student.find_by_id(4) ------
will return nil and will not raise an error.

..........................................

Q10. One example to tell the diff between hash and hashwithindifferentaccess :: 

....................................

h = HashWithIndifferentAccess.new
h[:my_value] = 'foo'
h['my_value'] #=> will return "foo"

....................................

h = Hash.new
h[:my_value] = 'foo'
h['my_value'] #=> nil 

....................................

Q 11. .........................................


7. Write a function that sorts the keys in a hash by the length of the key as a string. For instance, the hash:

{ abc: 'hello', 'another_key' => 123, 4567 => 'third' }
should result in:

["abc", "4567", "another_key"]


..........

Ans :: 


Best Answer ::
hsh.keys.map(&:to_s).sort_by(&:length)

Other Answers ::
hsh.keys.collect(&:to_s).sort_by { |key| key.length }
def key_sort hsh
	hsh.keys.collect(&:to_s).sort { |a, b| a.length <=> b.length }
end
collect { |x| x.to_s }

..................

Ans::  hsh.keys.map(&:to_s).sort_by(&:length)


As is always true in programming, there are in fact multiple ways to accomplish this.

The most straightforward answer would be of the form:

hsh.keys.map(&:to_s).sort_by(&:length)


or:

hsh.keys.collect(&:to_s).sort_by { |key| key.length }
Alternatively, Ruby’s Enumerable mixin provides many methods to operate on collections. The key here is to turn the hash keys into a collection, convert them all to strings, then sort the array.

def key_sort hsh
	hsh.keys.collect(&:to_s).sort { |a, b| a.length <=> b.length }
end
An equivalent call of the collect method is done with the usual block syntax of:

collect { |x| x.to_s }

.........................................

Q.11 . What will val1 and val2 equal after the code below is executed? Explain your answer.

val1 = true and false  # hint: output of this statement in IRB is NOT value of val1!
val2 = true && false

..........

Ans :: 
(val1 = true) and false    # results in val1 being equal to true
val2 = (true && false)     # results in val2 being equal to false

..........

Description ::

Although these two statements might appear to be equivalent, they are not, due to the order of operations. Specifically, the and and or operators have lower precedence than the = operator, whereas the && and || operators have higher precedence than the = operator, based on order of operations.

To help clarify this, here’s the same code, but employing parentheses to clarify the default order of operations:

(val1 = true) and false    # results in val1 being equal to true
val2 = (true && false)     # results in val2 being equal to false
This is, incidentally, a great example of why using parentheses to clearly specify your intent is generally a good practice, in any language. But whether or not you use parentheses, it’s important to be aware of these order of operations rules and to thereby ensure that you are properly determining when to employ and / or vs. && / ||.

...........

Q.12 . Consider the following code :: What will be the value of each of the following ::

..............................................................

VAL = 'Global'
 
module Foo
  VAL = 'Foo Local'
 
  class Bar
    def value1
      VAL
    end
  end
end

class Foo::Bar
  def value2
    VAL
  end
end

...

What will be the value of each of the following:

Foo::Bar.new.value1
Foo::Bar.new.value2
............................................................


..................

Ans ::

Foo::Bar.new.value1   ------    'Foo Local'
Foo::Bar.new.value2   ------     'Global'


Description ::

Foo::Bar.new.value1 will be equal to 'Foo Local' and Foo::Bar.new.value2 will be equal to 'Global'.

Here’s why:

The module keyword (as well as the class and def keywords) will create a new lexical scope for all of its contents. The above module Foo therefore creates the scope Foo in which the VAL constant equal to 'Foo Local' is defined. Inside Foo, we declare class Bar, which creates another new lexical scope (named Foo::Bar) which also has access to its parent scope (i.e., Foo) and all of its constants.

However, when we then declare Foo::Bar (i.e., using ::), we are actually creating yet another lexical scope, which is also named Foo::Bar (how’s that for confusing!). However, this lexical scope has no parent (i.e., it is entirely independent of the lexcial scope Foo created earlier) and therefore does not have any access to the contents of the ‘Foo’ scope. Therefore, inside class Foo::Bar, we only have access to the VAL constant declared at the beginning of the script (i.e., outside of any module) with the value 'Global'.

..................
............................................................

..............................................................


Q11. Is the line of code below valid Ruby code? If so, what does it do? Explain your answer.

-> (a) {p a}["Hello world"]



..................
............................................................

..............................................................

